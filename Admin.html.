<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>ArtMintX — Admin</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&display=swap" rel="stylesheet">
<style>
  :root{--bg:#070b14;--muted:#a9b6c7;--accent:#06b6d4}
  *{font-family:Inter,system-ui,Arial}
  body{background:linear-gradient(180deg,#070b14,#0a0f20);color:#e6eef7}
  .card-ghost{background:rgba(255,255,255,.04);border:1px solid rgba(255,255,255,.06);border-radius:1rem}
  .muted{color:var(--muted)}
  .btn-primary{background:var(--accent);border:none}
  table td, table th{vertical-align:middle}
</style>
</head>
<body>
<div class="container py-4">
  <div class="d-flex justify-content-between align-items-center mb-3">
    <div>
      <h3 class="mb-0">ArtMintX — Admin Panel</h3>
      <div class="muted small">Approve payments • Fund wallets • Manage artworks • Realtime logs</div>
    </div>
    <div>
      <button id="btnLogout" class="btn btn-outline-light btn-sm d-none">Logout</button>
    </div>
  </div>

  <!-- Login -->
  <div id="loginCard" class="card-ghost p-3 mb-3">
    <div class="row g-2">
      <div class="col-md-4"><input id="email" class="form-control" placeholder="admin@artmintx.com"></div>
      <div class="col-md-4"><input id="pass" type="password" class="form-control" placeholder="Password"></div>
      <div class="col-md-4 d-flex gap-2">
        <button id="btnLogin" class="btn btn-primary">Login</button>
      </div>
    </div>
    <div class="muted small mt-2">Use the dedicated admin account. Only this email is allowed: <code>admin@artmintx.com</code></div>
  </div>

  <!-- Dashboard -->
  <div id="dash" class="d-none">
    <!-- Admin wallets -->
    <div class="card-ghost p-3 mb-3">
      <div class="row g-2 align-items-end">
        <div class="col-md-4">
          <label class="form-label muted">BTC Address (shown to users)</label>
          <input id="admBtc" class="form-control" placeholder="bc1..." />
        </div>
        <div class="col-md-4">
          <label class="form-label muted">SOL Address (shown to users)</label>
          <input id="admSol" class="form-control" placeholder="G..." />
        </div>
        <div class="col-md-4 d-flex gap-2">
          <button id="btnSaveWallets" class="btn btn-success">Save</button>
          <span class="muted small">These appear in the user funding modal.</span>
        </div>
      </div>
    </div>

    <div class="row g-3">
      <div class="col-lg-6">
        <!-- Users -->
        <div class="card-ghost p-3 mb-3">
          <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Users</h5>
            <div class="input-group input-group-sm" style="max-width:300px">
              <input id="filterUser" class="form-control" placeholder="Filter by username/email">
              <button id="btnFilter" class="btn btn-outline-light btn-sm">Filter</button>
            </div>
          </div>
          <div class="mt-2" style="max-height:300px;overflow:auto">
            <table class="table table-borderless table-sm text-light">
              <thead><tr><th>Username</th><th>Email</th><th>Balance</th><th></th></tr></thead>
              <tbody id="usersTbody"></tbody>
            </table>
          </div>
        </div>

        <!-- Pending -->
        <div class="card-ghost p-3">
          <h5 class="mb-0">Pending</h5>
          <div class="muted small">Approve deposits and mint requests after verifying.</div>
          <div class="mt-2" style="max-height:300px;overflow:auto">
            <table class="table table-borderless table-sm text-light">
              <thead><tr><th>ID</th><th>User</th><th>Type</th><th>USD</th><th>CryptoAmt</th><th>Status</th><th></th></tr></thead>
              <tbody id="pendingTbody"></tbody>
            </table>
          </div>
        </div>
      </div>

      <div class="col-lg-6">
        <!-- Artworks -->
        <div class="card-ghost p-3 mb-3">
          <h5 class="mb-0">Artworks</h5>
          <div class="mt-2" style="max-height:240px;overflow:auto">
            <table class="table table-borderless table-sm text-light">
              <thead><tr><th>Title</th><th>Owner</th><th>Price</th><th>Status</th><th></th></tr></thead>
              <tbody id="artsTbody"></tbody>
            </table>
          </div>
        </div>

        <!-- Transactions -->
        <div class="card-ghost p-3">
          <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Transactions</h5>
            <button id="exportCsv" class="btn btn-primary btn-sm">Export CSV</button>
          </div>
          <div class="mt-2" style="max-height:300px;overflow:auto">
            <table class="table table-borderless table-sm text-light">
              <thead><tr><th>Date</th><th>User</th><th>Type</th><th>USD</th><th>Crypto</th><th>Notes</th></tr></thead>
              <tbody id="txTbody"></tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Confirm credit modal -->
<div class="modal fade" id="confirmModal" tabindex="-1">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content bg-dark text-light">
      <div class="modal-header"><h5 class="modal-title">Confirm Credit</h5>
        <button class="btn-close btn-close-white" data-bs-dismiss="modal"></button></div>
      <div class="modal-body" id="confirmBody">Are you sure?</div>
      <div class="modal-footer">
        <button id="confirmYes" class="btn btn-success">Yes — Credit</button>
        <button class="btn btn-outline-light" data-bs-dismiss="modal">Cancel</button>
      </div>
    </div>
  </div>
</div>

<script type="module">
  import { initializeApp } from "https://www.gstatic.com/firebasejs/9.23.0/firebase-app.js";
  import { getAuth, signInWithEmailAndPassword, onAuthStateChanged, signOut } from "https://www.gstatic.com/firebasejs/9.23.0/firebase-auth.js";
  import { getFirestore, collection, doc, setDoc, getDoc, getDocs, addDoc, updateDoc, onSnapshot, query, orderBy, serverTimestamp } from "https://www.gstatic.com/firebasejs/9.23.0/firebase-firestore.js";

  const firebaseConfig = {
    apiKey: "AIzaSyDX5l-iBZLWspb6bOlQSMvm7PnP2MYBs5o",
    authDomain: "artmintx.firebaseapp.com",
    projectId: "artmintx",
    storageBucket: "artmintx.firebasestorage.app",
    messagingSenderId: "209020671049",
    appId: "1:209020671049:web:df8f1f8b986a747ba1db98"
  };

  const app = initializeApp(firebaseConfig);
  const auth = getAuth(app);
  const db = getFirestore(app);

  const ADMIN_EMAIL = 'admin@artmintx.com';
  const $ = id => document.getElementById(id);
  const bsConfirm = new bootstrap.Modal($('#confirmModal'));

  function show(el){ el.classList.remove('d-none'); }
  function hide(el){ el.classList.add('d-none'); }

  // Login
  $('btnLogin').onclick = async ()=>{
    const e = $('email').value.trim();
    const p = $('pass').value;
    if(!e||!p) return alert('Enter email and password');
    try{ await signInWithEmailAndPassword(auth,e,p); }catch(err){ alert(err.message||err.code); }
  };
  $('btnLogout').onclick = async ()=> await signOut(auth);

  onAuthStateChanged(auth, async user=>{
    if(user && user.email===ADMIN_EMAIL){
      hide($('#loginCard')); show($('#dash')); show($('#btnLogout'));
      // mark admin flag on first login
      const uref = doc(db,'users',user.uid);
      const usnap = await getDoc(uref);
      if(!usnap.exists()) await setDoc(uref,{username:'admin',email:user.email,balanceUSD:0,isAdmin:true,createdAt:serverTimestamp()});
      else await updateDoc(uref,{isAdmin:true});
      initRealtime();
      // load wallets
      const w = await getDoc(doc(db,'admin_wallets','main'));
      if(w.exists()){ $('admBtc').value=w.data().btc||''; $('admSol').value=w.data().sol||''; }
    }else{
      show($('#loginCard')); hide($('#dash')); hide($('#btnLogout'));
      if(user && user.email!==ADMIN_EMAIL){ alert('Unauthorized admin email'); signOut(auth); }
    }
  });

  // Save wallets
  $('btnSaveWallets').onclick = async ()=>{
    const btc = $('admBtc').value.trim();
    const sol = $('admSol').value.trim();
    await setDoc(doc(db,'admin_wallets','main'),{btc,sol});
    alert('Saved');
  };

  // Realtime tables
  function renderUsers(list){
    const tb = $('usersTbody'); tb.innerHTML='';
    list.forEach(u=>{
      const tr = document.createElement('tr');
      tr.innerHTML = `<td>${u.username||''}</td><td>${u.email||''}</td><td>$${Number(u.balanceUSD||0).toFixed(2)}</td>
        <td><button class="btn btn-sm btn-outline-light" onclick="credit('${u.id}','${u.username||u.email}')">Credit</button></td>`;
      tb.appendChild(tr);
    });
  }
  function renderPending(list){
    const tb = $('pendingTbody'); tb.innerHTML='';
    list.forEach(p=>{
      const amtCrypto = p.btcAmount||p.solAmount||'';
      const tr = document.createElement('tr');
      tr.innerHTML = `<td style="max-width:90px;word-break:break-all">${p.id}</td><td>${p.userId||''}</td>
        <td>${p.type}</td><td>$${Number(p.amountUSD||0).toFixed(2)}</td><td>${amtCrypto}</td><td>${p.status}</td>
        <td>${p.status==='waiting'
          ? `<button class="btn btn-sm btn-success" onclick="approve('${p.id}')">Approve</button>
             <button class="btn btn-sm btn-danger" onclick="reject('${p.id}')">Reject</button>`
          : '<span class="muted small">—</span>'}</td>`;
      tb.appendChild(tr);
    });
  }
  function renderArts(list){
    const tb = $('artsTbody'); tb.innerHTML='';
    list.forEach(a=>{
      const tr = document.createElement('tr');
      tr.innerHTML = `<td>${a.title||''}</td><td>${a.owner||''}</td><td>$${Number(a.priceUSD||0).toFixed(2)}</td>
        <td>${a.status||''}</td>
        <td><button class="btn btn-sm btn-success" onclick="activate('${a.id}')">Activate</button>
            <button class="btn btn-sm btn-outline-light" onclick="removeArt('${a.id}')">Remove</button></td>`;
      tb.appendChild(tr);
    });
  }
  function renderTx(list){
    const tb = $('txTbody'); tb.innerHTML='';
    list.forEach(t=>{
      const d = t.date?.seconds ? new Date(t.date.seconds*1000).toLocaleString() : '';
      const tr = document.createElement('tr');
      tr.innerHTML = `<td>${d}</td><td>${t.user||''}</td><td>${t.type||''}</td>
        <td>$${Number(t.amountUSD||0).toFixed(2)}</td><td>${t.crypto||''}</td><td>${t.notes||''}</td>`;
      tb.appendChild(tr);
    });
  }

  let unsubUsers=null,unsubPend=null,unsubArts=null,unsubTx=null;
  function initRealtime(){
    unsubUsers = onSnapshot(collection(db,'users'), snap=>{
      renderUsers(snap.docs.map(d=>({id:d.id,...d.data()})));
    });
    unsubPend = onSnapshot(query(collection(db,'pending'), orderBy('createdAt','desc')), snap=>{
      renderPending(snap.docs.map(d=>({id:d.id,...d.data()})));
    });
    unsubArts = onSnapshot(query(collection(db,'artworks'), orderBy('createdAt','desc')), snap=>{
      renderArts(snap.docs.map(d=>({id:d.id,...d.data()})));
    });
    unsubTx = onSnapshot(query(collection(db,'transactions'), orderBy('date','desc')), snap=>{
      renderTx(snap.docs.map(d=>({id:d.id,...d.data()})));
    });
  }

  // Approvals
  window.approve = async function(pendingId){
    const pRef = doc(db,'pending',pendingId);
    const pSnap = await getDoc(pRef); if(!pSnap.exists()) return alert('Not found');
    const p = pSnap.data();
    if(!confirm(`Approve ${p.type} for ${p.userId} — $${p.amountUSD}?`)) return;
    await updateDoc(pRef,{status:'paid',approvedAt:serverTimestamp()});
    if(p.type==='fund'){
      // locate user by username
      const users = await getDocs(collection(db,'users'));
      let target=null;
      users.forEach(d=>{ const ud=d.data(); if((ud.username||'')===p.userId) target={id:d.id,data:ud}; });
      if(target){
        const newBal = Number(target.data.balanceUSD||0) + Number(p.amountUSD||0);
        await updateDoc(doc(db,'users',target.id),{balanceUSD:newBal});
        await addDoc(collection(db,'transactions'),{
          user:p.userId,type:'fund',amountUSD:Number(p.amountUSD||0),crypto:p.chain||'',
          cryptoAmount:p.btcAmount||p.solAmount||'',notes:'Approved by admin',date:serverTimestamp()
        });
      }
    }else if(p.type==='mint'){
      // activate any pending artworks for that user
      const arts = await getDocs(collection(db,'artworks'));
      const ops=[];
      arts.forEach(d=>{ const a=d.data(); if(a.owner===p.userId && a.status==='pending'){ ops.push(updateDoc(doc(db,'artworks',d.id),{status:'active'})); }});
      await Promise.all(ops);
      await addDoc(collection(db,'transactions'),{
        user:p.userId,type:'mint',amountUSD:10,crypto:'—',cryptoAmount:'',notes:'Mint approved',date:serverTimestamp()
      });
    }
    alert('Approved');
  };

  window.reject = async function(pendingId){
    if(!confirm('Reject this request?')) return;
    await updateDoc(doc(db,'pending',pendingId),{status:'rejected'});
    alert('Rejected');
  };

  window.activate = async function(artId){
    if(!confirm('Activate this artwork?')) return;
    await updateDoc(doc(db,'artworks',artId),{status:'active'});
  };

  window.removeArt = async function(artId){
    if(!confirm('Remove this artwork?')) return;
    await updateDoc(doc(db,'artworks',artId),{status:'removed'});
  };

  // Manual credit (with confirm modal)
  let pendingCredit = null;
  window.credit = async function(userDocId, username){
    const amtStr = prompt(`Credit USD amount to ${username}:`, '50');
    const amt = Number(amtStr); if(!amt||amt<=0) return;
    pendingCredit = { userDocId, username, amt };
    $('#confirmBody').innerText = `Credit $${amt.toFixed(2)} to ${username}?`;
    bsConfirm.show();
  };

  document.getElementById('confirmYes').onclick = async ()=>{
    if(!pendingCredit) return;
    const {userDocId, username, amt} = pendingCredit;
    const uRef = doc(db,'users',userDocId);
    const uSnap = await getDoc(uRef);
    const cur = uSnap.exists()? Number(uSnap.data().balanceUSD||0):0;
    await updateDoc(uRef,{balanceUSD:cur+amt});
    await addDoc(collection(db,'transactions'),{
      user:username,type:'fund',amountUSD:amt,crypto:'admin-credit',cryptoAmount:'',notes:'Manual credit',date:serverTimestamp()
    });
    pendingCredit=null; bsConfirm.hide(); alert('Credited.');
  };

  // Export CSV
  $('exportCsv').onclick = async ()=>{
    const snap = await getDocs(collection(db,'transactions'));
    const rows = [['date','user','type','amountUSD','crypto','cryptoAmount','notes']];
    snap.forEach(d=>{
      const r=d.data();
      const dt = r.date?.seconds ? new Date(r.date.seconds*1000).toISOString() : '';
      rows.push([dt,r.user||'',r.type||'',r.amountUSD||0,r.crypto||'',r.cryptoAmount||'',r.notes||'']);
    });
    const csv = rows.map(r=>r.map(c=>`"${String(c).replace(/"/g,'""')}"`).join(',')).join('\n');
    const blob = new Blob([csv],{type:'text/csv'});
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a'); a.href=url; a.download='transactions.csv'; document.body.appendChild(a); a.click(); URL.revokeObjectURL(url); a.remove();
  };
</script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>